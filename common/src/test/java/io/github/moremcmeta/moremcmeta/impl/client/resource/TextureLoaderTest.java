/*
 * MoreMcmeta is a Minecraft mod expanding texture animation capabilities.
 * Copyright (C) 2022 soir20
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package io.github.moremcmeta.moremcmeta.impl.client.resource;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import io.github.moremcmeta.moremcmeta.api.client.metadata.CombinedMetadataView;
import io.github.moremcmeta.moremcmeta.api.client.metadata.InvalidMetadataException;
import io.github.moremcmeta.moremcmeta.api.client.metadata.MetadataParser;
import io.github.moremcmeta.moremcmeta.api.client.metadata.MetadataView;
import io.github.moremcmeta.moremcmeta.api.client.metadata.ResourceRepository;
import io.github.moremcmeta.moremcmeta.impl.client.io.MockMetadataView;
import net.minecraft.ResourceLocationException;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.packs.PackType;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

/**
 * <p>Tests the {@link TextureLoader}. We assume that the retrieval of files with the correct extension
 * works because that is part of Minecraft's code.</p>
 *
 * <p>Note about low branch coverage for this class: The branches are almost all generated by the compiler
 * in the try-with-resources statement in the loader. Some of these branches might be unreachable.
 * Thus, it makes more sense to test representative cases here than to try to maximize branch coverage.
 * See <a href="https://stackoverflow.com/a/17356707">...</a> (StackOverflow explanation) and
 * <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.20.3.1">...</a>
 * (standards definition of try-with-resources).</p>
 * @author soir20
 */
public final class TextureLoaderTest {
    private final Logger LOGGER = LogManager.getLogger();
    private final MetadataParser MOCK_READER = (metadataLocation, metadataStream, resourceRepository) -> Map.of(
            new ResourceLocation(
                    metadataLocation.getNamespace(),
                    metadataLocation.getPath().replace("2.moremcmeta", "").replace(".moremcmeta", "")
            ),
            new MockMetadataView(List.of("one", "two", "three"))
    );
    private final MetadataParser MOCK_READER_2 = (metadataLocation, metadataStream, resourceRepository) -> Map.of(
            new ResourceLocation(
                    metadataLocation.getNamespace(),
                    metadataLocation.getPath().replace(".other", "")
            ),
            new MockMetadataView(List.of("four", "five", "six"))
    );
    private final ImmutableMap<String, MetadataParser> MOCK_READERS = ImmutableMap.of(
            ".moremcmeta", MOCK_READER,
            ".other", MOCK_READER_2
    );

    @Rule
    public final ExpectedException expectedException = ExpectedException.none();

    @Test
    public void construct_TextureFactoryNull_NullPointerException() {
        expectedException.expect(NullPointerException.class);
        new TextureLoader<>(
                null,
                MOCK_READERS,
                LOGGER
        );
    }

    @Test
    public void construct_MetadataReadersNull_NullPointerException() {
        expectedException.expect(NullPointerException.class);
        new TextureLoader<>(
                (texStream, metadata) -> 1,
                null,
                LOGGER
        );
    }

    @Test
    public void construct_LoggerNull_NullPointerException() {
        expectedException.expect(NullPointerException.class);
        new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                null
        );
    }

    @Test
    public void construct_ExtensionWithoutPeriod_IllegalArgException() {
        expectedException.expect(IllegalArgumentException.class);
        new TextureLoader<>(
                (texStream, metadata) -> 1,
                ImmutableMap.of("moremcmeta", MOCK_READER),
                LOGGER
        );
    }

    @Test
    public void construct_ExtensionWithPeriodNotAtStart_IllegalArgException() {
        expectedException.expect(IllegalArgumentException.class);
        new TextureLoader<>(
                (texStream, metadata) -> 1,
                ImmutableMap.of("png.moremcmeta", MOCK_READER),
                LOGGER
        );
    }

    @Test
    public void construct_ExtensionWithMultiplePeriods_IllegalArgException() {
        expectedException.expect(IllegalArgumentException.class);
        new TextureLoader<>(
                (texStream, metadata) -> 1,
                ImmutableMap.of(".png.moremcmeta", MOCK_READER),
                LOGGER
        );
    }

    @Test
    public void construct_ExtensionWithJustPeriod_IllegalArgException() {
        expectedException.expect(IllegalArgumentException.class);
        new TextureLoader<>(
                (texStream, metadata) -> 1,
                ImmutableMap.of(".", MOCK_READER),
                LOGGER
        );
    }

    @Test
    public void load_ResourceManagerNull_NullPointerException() {
        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        expectedException.expect(NullPointerException.class);
        loader.load(null, "textures");
    }

    @Test
    public void load_PathsNull_NullPointerException() {
        OrderedResourceRepository repository = makeMockRepository(Set.of("textures/bat.png.moremcmeta",
                "textures/creeper.png.moremcmeta", "textures/zombie.png.moremcmeta"));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        expectedException.expect(NullPointerException.class);
        loader.load(repository, (String[]) null);
    }

    @Test
    public void load_PathNull_NullPointerException() {
        OrderedResourceRepository repository = makeMockRepository(Set.of("textures/bat.png.moremcmeta",
                "textures/creeper.png.moremcmeta", "textures/zombie.png.moremcmeta"));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        expectedException.expect(NullPointerException.class);
        loader.load(repository, (String) null);
    }

    @Test
    public void load_EmptyPath_IllegalArgException() {
        OrderedResourceRepository repository = makeMockRepository(Set.of("textures/bat.png.moremcmeta",
                        "textures/creeper.png.moremcmeta", "textures/zombie.png.moremcmeta"));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1, 
                MOCK_READERS,
                LOGGER
        );

        expectedException.expect(IllegalArgumentException.class);
        loader.load(repository, "");
    }

    @Test
    public void load_SlashOnlyPath_IllegalArgException() {
        OrderedResourceRepository repository = makeMockRepository(Set.of("textures/bat.png.moremcmeta",
                        "textures/creeper.png.moremcmeta", "textures/zombie.png.moremcmeta"));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        expectedException.expect(IllegalArgumentException.class);
        loader.load(repository, "/");
    }

    @Test
    public void load_PathStartsWithSlash_IllegalArgException() {
        OrderedResourceRepository repository = makeMockRepository(Set.of("textures/bat.png.moremcmeta",
                        "textures/creeper.png.moremcmeta", "textures/zombie.png.moremcmeta"));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        expectedException.expect(IllegalArgumentException.class);
        loader.load(repository, "/textures");
    }

    @Test
    public void load_ValidLocations_LoadsAllTextures() {
        OrderedResourceRepository repository = makeMockRepository(Set.of(
                "textures/bat.png",
                "textures/bat.png.moremcmeta",
                "textures/creeper.png",
                "textures/creeper.png.moremcmeta",
                "textures/zombie.png",
                "textures/zombie.png.moremcmeta"
        ));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");

        assertEquals(3, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/creeper.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/zombie.png")));
    }

    @Test
    public void load_TwoConflictingMetadataFilesForSameTextureInLowerPack_DoesNotSkip() {
        OrderedResourceRepository repository = makeMockRepository(
                Set.of(
                        "textures/bat.png",
                        "textures/bat.png.moremcmeta",
                        "textures/creeper.png",
                        "textures/creeper.png.moremcmeta",
                        "textures/zombie.png",
                        "textures/zombie.png.moremcmeta"
                ),
                Set.of(
                        "textures/bat.png.moremcmeta",
                        "textures/bat2.png.moremcmeta"
                )
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                ImmutableMap.of(".moremcmeta", (metadataLocation, metadataStream, resourceRepository) -> {
                    if (metadataLocation.getPath().equals("textures/bat2.png.moremcmeta")) {
                        return Map.of(
                                new ResourceLocation("textures/bat.png"),
                                new MockMetadataView(List.of("four", "one", "six"))
                        );
                    }

                    return MOCK_READER.parse(metadataLocation, metadataStream, resourceRepository);
                }),
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");

        assertEquals(3, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/zombie.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/creeper.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
    }

    @Test
    public void load_DifferentPath_LoadsAllTextures() {
        OrderedResourceRepository repository = makeMockRepository(Set.of(
                "other/bat.png",
                "other/bat.png.moremcmeta",
                "other/creeper.png",
                "other/creeper.png.moremcmeta",
                "other/zombie.png",
                "other/zombie.png.moremcmeta"
        ));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "other");

        assertEquals(3, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("other/bat.png")));
        assertTrue(locations.containsKey(new ResourceLocation("other/creeper.png")));
        assertTrue(locations.containsKey(new ResourceLocation("other/zombie.png")));
    }

    @Test
    public void load_FilteredLocations_LoadsFilteredTextures() {
        OrderedResourceRepository repository = makeMockRepository(Set.of("textures/bat.png", "textures/bat.png.moremcmeta", "creeper",
                "creeper.moremcmeta", "zombie.jpg", "zombie.jpg.moremcmeta"));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");

        assertEquals(1, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
    }

    @Test
    public void load_ResultsBasedOnSearch_MetadataAppliesToAllFoundTextures() {
        OrderedResourceRepository repository = makeMockRepository(Set.of(
                "textures/bat_abcd.png", "textures/bat_abcd.png.moremcmeta",
                "textures/creeper_abcd.png",
                "zombie.png", "zombie.png.moremcmeta",
                "optifine/ghast_abcd.png", "optifine/ghast_abcd.png.moremcmeta"
        ));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                ImmutableMap.of(".moremcmeta", (metadataLocation, metadataStream, resourceRepository) -> {
                    Set<? extends ResourceLocation> locations = resourceRepository.list(
                            (fileName) -> fileName.endsWith("_abcd.png")
                    );

                    return locations.stream().collect(Collectors.toMap(
                            Function.identity(),
                            (location) -> new MockMetadataView(List.of(location.getPath()))
                    ));
                }),
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");

        assertEquals(2, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat_abcd.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/creeper_abcd.png")));
    }

    @Test
    public void load_SearchRetrievesPack_CorrectResourcesFoundInPacks() {
        OrderedResourceRepository repository = makeMockRepository(Set.of(
                "textures/bat_abcd.png", "textures/bat_abcd.png.moremcmeta",
                "textures/creeper_abcd.png",
                "zombie.png", "zombie.png.moremcmeta",
                "optifine/ghast_abcd.png", "optifine/ghast_abcd.png.moremcmeta"
        ));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                ImmutableMap.of(".moremcmeta", (metadataLocation, metadataStream, resourceRepository) -> {
                    Set<? extends ResourceLocation> locations = resourceRepository.list(
                            (fileName) -> fileName.endsWith("_abcd.png")
                    );

                    Optional<ResourceRepository.Pack> pack = resourceRepository.highestPackWith(
                            new ResourceLocation("textures/bat_abcd.png")
                    );
                    assertTrue(pack.isPresent());
                    assertTrue(pack.get().resource(new ResourceLocation("zombie.png")).isPresent());
                    assertFalse(pack.get().resource(new ResourceLocation("zombie2.png")).isPresent());
                    assertFalse(resourceRepository.highestPackWith(new ResourceLocation("dummy")).isPresent());

                    return locations.stream().collect(Collectors.toMap(
                            Function.identity(),
                            (location) -> new MockMetadataView(List.of(location.getPath()))
                    ));
                }),
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");

        assertEquals(2, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat_abcd.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/creeper_abcd.png")));
    }

    @Test
    public void load_MissingTextureLocations_LoadsNoMissingTextures() {
        OrderedResourceRepository repository = makeMockRepository(Set.of("textures/bat.png", "textures/bat.png.moremcmeta",
                "textures/creeper.png.moremcmeta", "textures/zombie.png.moremcmeta"));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");

        assertEquals(1, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
    }

    @Test
    public void load_MissingMetadataLocations_LoadsNoMissingTextures() {
        OrderedResourceRepository repository = makeMockRepository(Set.of("textures/bat.png", "textures/bat.png.moremcmeta",
                "textures/creeper.png", "textures/zombie.png"));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");

        assertEquals(1, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
    }

    @Test
    public void load_InvalidMetadataDuringRead_LoadsValidTextures() {
        OrderedResourceRepository repository = makeMockRepository(Set.of(
                "textures/bat.png",
                "textures/bat.png.moremcmeta",
                "textures/creeper.png",
                "textures/zombie.png",
                "textures/creeper.png.moremcmeta",
                "textures/zombie.png.moremcmeta"
        ));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                ImmutableMap.of(".moremcmeta", (metadataLocation, metadataStream, resourceRepository) -> {
                    if (metadataLocation.getPath().contains("creeper")) {
                        throw new InvalidMetadataException("Dummy exception");
                    }

                    return MOCK_READER.parse(metadataLocation, metadataStream, resourceRepository);
                }),
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");
        assertEquals(2, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/zombie.png")));
    }

    @Test
    public void load_InvalidMetadataAfterRead_LoadsValidTextures() {
        OrderedResourceRepository repository = makeMockRepository(Set.of(
                "textures/bat.png",
                "textures/bat.png.moremcmeta",
                "textures/creeper.png",
                "textures/zombie.png",
                "textures/creeper.png.moremcmeta",
                "textures/zombie.png.moremcmeta"
        ));

        AtomicInteger texturesLoaded = new AtomicInteger();
        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> {
                    if (texturesLoaded.getAndIncrement() < 1) {
                        throw new InvalidMetadataException("Dummy exception");
                    }
                    return 1;
                },
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");
        assertEquals(2, locations.size());
    }

    @Test
    public void load_UnreadableTexture_LoadsValidTextures() {
        OrderedResourceRepository repository = makeMockRepository(Set.of(
                "textures/bat.png",
                "textures/bat.png.moremcmeta",
                "textures/creeper.png",
                "textures/zombie.png",
                "textures/creeper.png.moremcmeta",
                "textures/zombie.png.moremcmeta"
        ));

        AtomicInteger texturesLoaded = new AtomicInteger();
        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> {
                    if (texturesLoaded.getAndIncrement() < 1) {
                        throw new IOException("Dummy exception");
                    }
                    return 1;
                },
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");
        assertEquals(2, locations.size());
    }

    @Test
    public void load_UnknownException_ExceptionNotCaught() {
        OrderedResourceRepository repository = makeMockRepository(Set.of(
                "textures/bat.png",
                "textures/bat.png.moremcmeta",
                "textures/creeper.png",
                "textures/creeper.png.moremcmeta",
                "textures/zombie.png",
                "textures/zombie.png.moremcmeta"
        ));

        AtomicInteger texturesLoaded = new AtomicInteger();
        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> {
                    if (texturesLoaded.getAndIncrement() < 1) {
                        throw new RuntimeException("Dummy exception");
                    }
                    return 1;
                },
                MOCK_READERS,
                LOGGER
        );

        expectedException.expect(RuntimeException.class);
        loader.load(repository, "textures");
    }

    @Test
    public void load_ResourceManagerThrowsUnknownException_ExceptionNotCaught() {
        OrderedResourceRepository repository = new OrderedResourceRepository(PackType.CLIENT_RESOURCES,
                Set.of(new MockResourceCollection(Set.of(
                        new ResourceLocation("textures/bat.png"),
                        new ResourceLocation("textures/creeper.png"),
                        new ResourceLocation("textures/zombie.png"),
                        new ResourceLocation("textures/bat.png.moremcmeta"),
                        new ResourceLocation("textures/creeper.png.moremcmeta"),
                        new ResourceLocation("textures/zombie.png.moremcmeta")
                )))
        ) {
            @Override
            public Set<ResourceLocation> list(String pathIn, Predicate<String> fileFilter) {
                throw new RuntimeException();
            }
        };

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );


        expectedException.expect(RuntimeException.class);
        loader.load(repository, "textures");
    }

    @Test
    public void load_ResourceManagerReturnsNullTexture_NullPointerException() {
        ResourceCollection collection = new MockResourceCollection(Set.of(
                new ResourceLocation("textures/bat.png"),
                new ResourceLocation("textures/creeper.png"),
                new ResourceLocation("textures/zombie.png"),
                new ResourceLocation("textures/bat.png.moremcmeta"),
                new ResourceLocation("textures/creeper.png.moremcmeta"),
                new ResourceLocation("textures/zombie.png.moremcmeta")
        )) {
            public InputStream find(PackType resourceType, ResourceLocation location) throws IOException {
                if (contains(resourceType, location) && !location.getPath().endsWith(".moremcmeta")) {
                    return null;
                }

                return super.find(resourceType, location);
            }
        };
        OrderedResourceRepository repository = new OrderedResourceRepository(
                PackType.CLIENT_RESOURCES,
                Set.of(collection)
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        expectedException.expect(NullPointerException.class);
        loader.load(repository, "textures");
    }

    @Test
    public void load_ResourceManagerReturnsNullMetadata_NullPointerException() {
        ResourceCollection collection = new MockResourceCollection(Set.of(
                new ResourceLocation("textures/bat.png"),
                new ResourceLocation("textures/creeper.png"),
                new ResourceLocation("textures/zombie.png"),
                new ResourceLocation("textures/bat.png.moremcmeta"),
                new ResourceLocation("textures/creeper.png.moremcmeta"),
                new ResourceLocation("textures/zombie.png.moremcmeta")
        )) {
            public InputStream find(PackType resourceType, ResourceLocation location) throws IOException {
                if (contains(resourceType, location) && location.getPath().endsWith(".moremcmeta")) {
                    return null;
                }

                return super.find(resourceType, location);
            }
        };
        OrderedResourceRepository repository = new OrderedResourceRepository(
                PackType.CLIENT_RESOURCES,
                Set.of(collection)
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        expectedException.expect(NullPointerException.class);
        loader.load(repository, "textures");
    }

    @Test
    public void load_ClosureIOException_LoadsValidTextures() {
        ResourceCollection collection = new MockResourceCollection(Set.of(
                new ResourceLocation("textures/bat.png"),
                new ResourceLocation("textures/creeper.png"),
                new ResourceLocation("textures/zombie.png"),
                new ResourceLocation("textures/bat.png.moremcmeta"),
                new ResourceLocation("textures/creeper.png.moremcmeta"),
                new ResourceLocation("textures/zombie.png.moremcmeta")
        )) {
            public InputStream find(PackType resourceType, ResourceLocation location) throws IOException {
                if (contains(resourceType, location) && !location.getPath().contains("bat")) {
                    return new InputStream() {
                        @Override
                        public int read() {
                            return 0;
                        }

                        @Override
                        public void close() throws IOException {
                            throw new IOException("Dummy exception");
                        }
                    };
                }

                return super.find(resourceType, location);
            }
        };
        OrderedResourceRepository repository = new OrderedResourceRepository(
                PackType.CLIENT_RESOURCES,
                Set.of(collection)
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");

        assertEquals(1, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
    }

    @Test
    public void load_ClosureUnknownException_ExceptionNotCaught() {
        ResourceCollection collection = new MockResourceCollection(Set.of(
                new ResourceLocation("textures/bat.png"),
                new ResourceLocation("textures/creeper.png"),
                new ResourceLocation("textures/zombie.png"),
                new ResourceLocation("textures/bat.png.moremcmeta"),
                new ResourceLocation("textures/creeper.png.moremcmeta"),
                new ResourceLocation("textures/zombie.png.moremcmeta")
        )) {
            public InputStream find(PackType resourceType, ResourceLocation location) throws IOException {
                if (contains(resourceType, location) && location.getPath().contains("bat")) {
                    return new InputStream() {
                        @Override
                        public int read() {
                            return 0;
                        }

                        @Override
                        public void close() {
                            throw new RuntimeException("Dummy exception");
                        }
                    };
                }

                return super.find(resourceType, location);
            }
        };
        OrderedResourceRepository repository = new OrderedResourceRepository(
                PackType.CLIENT_RESOURCES,
                Set.of(collection)
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        expectedException.expect(RuntimeException.class);
        loader.load(repository, "textures");
    }

    @Test
    public void load_TextureAndMetadataInSamePacks_FindsTexture() {
        OrderedResourceRepository repository = makeMockRepository(
                Set.of("textures/bat.png", "textures/bat.png.moremcmeta", "textures/zombie.png",
                        "textures/zombie.png.moremcmeta"),
                Set.of("textures/creeper.png", "textures/creeper.png.moremcmeta")
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> results = loader.load(repository, "textures");

        assertEquals(3, results.size());
        assertTrue(results.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/zombie.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/creeper.png")));
    }

    @Test
    public void load_MetadataInPackAboveTexture_FindsTexture() {
        OrderedResourceRepository repository = makeMockRepository(
                Set.of("textures/bat.png.moremcmeta", "textures/zombie.png.moremcmeta"),
                Set.of("textures/bat.png", "textures/creeper.png", "textures/creeper.png.moremcmeta",
                        "textures/zombie.png")
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> results = loader.load(repository, "textures");

        assertEquals(3, results.size());
        assertTrue(results.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/zombie.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/creeper.png")));
    }

    @Test
    public void load_MetadataInPackBelowTexture_DoesNotFindTexture() {
        OrderedResourceRepository repository = makeMockRepository(
                Set.of("textures/bat.png", "textures/creeper.png", "textures/creeper.png.moremcmeta",
                        "textures/zombie.png"),
                Set.of("textures/bat.png.moremcmeta", "textures/zombie.png.moremcmeta")
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> results = loader.load(repository, "textures");

        assertEquals(1, results.size());
        assertTrue(results.containsKey(new ResourceLocation("textures/creeper.png")));
    }

    @Test
    public void load_DiffFormatMetadataInPackBelowTexture_IgnoresLowerMetadata() {
        OrderedResourceRepository repository = makeMockRepository(
                Set.of("textures/bat.png", "textures/bat.png.moremcmeta", "textures/zombie.png",
                        "textures/zombie.png.moremcmeta"),
                Set.of("textures/creeper.png", "textures/creeper.png.moremcmeta", "textures/zombie.png.other")
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> results = loader.load(repository, "textures");

        assertEquals(3, results.size());
        assertTrue(results.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/zombie.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/creeper.png")));
    }

    @Test
    public void load_DiffFormatMetadataInPackWithTexture_Conflict() {
        OrderedResourceRepository repository = makeMockRepository(
                Set.of("textures/bat.png", "textures/bat.png.moremcmeta", "textures/zombie.png",
                        "textures/zombie.png.moremcmeta", "textures/zombie.png.other"),
                Set.of("textures/creeper.png", "textures/creeper.png.moremcmeta")
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> results = loader.load(repository, "textures");

        assertEquals(2, results.size());
        assertTrue(results.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/creeper.png")));
    }

    @Test
    public void load_DiffFormatMetadataInPackAboveTexture_Conflict() {
        OrderedResourceRepository repository = makeMockRepository(
                Set.of("textures/bat.png", "textures/bat.png.moremcmeta", "textures/zombie.png",
                        "textures/zombie.png.moremcmeta", "textures/creeper.png.other"),
                Set.of("textures/creeper.png", "textures/creeper.png.moremcmeta")
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> results = loader.load(repository, "textures");

        assertEquals(2, results.size());
        assertTrue(results.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/zombie.png")));
    }

    @Test
    public void load_SameFormatMetadataInPackWithTexture_Combined() {
        OrderedResourceRepository repository = makeMockRepository(
                Set.of("textures/bat.png", "textures/bat.png.moremcmeta", "textures/zombie.png",
                        "textures/zombie.png.moremcmeta", "textures/zombie.png2.moremcmeta"),
                Set.of("textures/creeper.png", "textures/creeper.png.moremcmeta")
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                ImmutableMap.of(
                        ".moremcmeta", new MetadataParser() {
                            @Override
                            public Map<? extends ResourceLocation, ? extends MetadataView> parse(ResourceLocation metadataLocation,
                                                                                                 InputStream metadataStream,
                                                                                                 ResourceRepository resourceRepository)
                                    throws InvalidMetadataException {
                                return MOCK_READER.parse(metadataLocation, metadataStream, resourceRepository);
                            }

                            @Override
                            public MetadataView combine(ResourceLocation textureLocation,
                                                        Map<? extends ResourceLocation, ? extends MetadataView> metadataByLocation) {
                                assertEquals(new ResourceLocation("textures/zombie.png"), textureLocation);
                                assertEquals(
                                        Set.of(
                                                new ResourceLocation("textures/zombie.png2.moremcmeta"),
                                                new ResourceLocation("textures/zombie.png.moremcmeta")
                                        ),
                                        metadataByLocation.keySet()
                                );
                                return new CombinedMetadataView(metadataByLocation.values());
                            }
                        }
                ),
                LOGGER
        );

        Map<ResourceLocation, Integer> results = loader.load(repository, "textures");

        assertEquals(3, results.size());
        assertTrue(results.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/creeper.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/zombie.png")));
    }

    @Test
    public void load_SameFormatMetadataInPackAboveTexture_Combined() {
        OrderedResourceRepository repository = makeMockRepository(
                Set.of("textures/bat.png", "textures/bat.png.moremcmeta", "textures/zombie.png",
                        "textures/zombie.png.moremcmeta", "textures/creeper.png2.moremcmeta"),
                Set.of("textures/creeper.png", "textures/creeper.png.moremcmeta")
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                ImmutableMap.of(
                        ".moremcmeta", new MetadataParser() {
                            @Override
                            public Map<? extends ResourceLocation, ? extends MetadataView> parse(ResourceLocation metadataLocation,
                                                                                                 InputStream metadataStream,
                                                                                                 ResourceRepository resourceRepository)
                                    throws InvalidMetadataException {
                                return MOCK_READER.parse(metadataLocation, metadataStream, resourceRepository);
                            }

                            @Override
                            public MetadataView combine(ResourceLocation textureLocation,
                                                        Map<? extends ResourceLocation, ? extends MetadataView> metadataByLocation) {
                                assertEquals(new ResourceLocation("textures/creeper.png"), textureLocation);
                                assertEquals(
                                        Set.of(
                                                new ResourceLocation("textures/creeper.png2.moremcmeta"),
                                                new ResourceLocation("textures/creeper.png.moremcmeta")
                                        ),
                                        metadataByLocation.keySet()
                                );
                                return new CombinedMetadataView(metadataByLocation.values());
                            }
                        }
                ),
                LOGGER
        );

        Map<ResourceLocation, Integer> results = loader.load(repository, "textures");

        assertEquals(3, results.size());
        assertTrue(results.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/creeper.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/zombie.png")));
    }

    @Test
    public void load_SameFormatMetadataInPackAboveTexture_CombinerExceptionExcluded() {
        OrderedResourceRepository repository = makeMockRepository(
                Set.of("textures/bat.png", "textures/bat.png.moremcmeta", "textures/zombie.png",
                        "textures/zombie.png.moremcmeta", "textures/creeper.png2.moremcmeta"),
                Set.of("textures/creeper.png", "textures/creeper.png.moremcmeta")
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> results = loader.load(repository, "textures");

        assertEquals(2, results.size());
        assertTrue(results.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/zombie.png")));
    }

    @Test
    public void load_SameFormatMetadataInPackWithTexture_CombinerExceptionExcluded() {
        OrderedResourceRepository repository = makeMockRepository(
                Set.of("textures/bat.png", "textures/bat.png.moremcmeta", "textures/zombie.png",
                        "textures/zombie.png.moremcmeta", "textures/zombie.png2.moremcmeta"),
                Set.of("textures/creeper.png", "textures/creeper.png.moremcmeta")
        );

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> results = loader.load(repository, "textures");

        assertEquals(2, results.size());
        assertTrue(results.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(results.containsKey(new ResourceLocation("textures/creeper.png")));
    }

    @Test
    public void load_ResourceLocationException_ExceptionNotCaught() {
        OrderedResourceRepository repository = new OrderedResourceRepository(PackType.CLIENT_RESOURCES,
                Set.of(new MockResourceCollection(Set.of(
                        new ResourceLocation("textures/bat.png"),
                        new ResourceLocation("textures/creeper.png"),
                        new ResourceLocation("textures/zombie.png"),
                        new ResourceLocation("textures/bat.png.moremcmeta"),
                        new ResourceLocation("textures/creeper.png.moremcmeta"),
                        new ResourceLocation("textures/zombie.png.moremcmeta")
                )))
        ) {
            @Override
            public Set<ResourceLocation> list(String pathIn, Predicate<String> fileFilter) {
                throw new ResourceLocationException("Dummy exception");
            }
        };

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        // Individual packs should catch these exceptions, not the loader
        expectedException.expect(ResourceLocationException.class);
        loader.load(repository, "textures");

    }

    @Test
    public void load_DiffNamespaces_AllLoaded() {
        OrderedResourceRepository repository = makeMockRepository(Set.of(
                "test:textures/bat.png",
                "test:textures/bat.png.moremcmeta",
                "moremcmeta:textures/creeper.png",
                "moremcmeta:textures/creeper.png.moremcmeta",
                "textures/zombie.png",
                "textures/zombie.png.moremcmeta"));

        TextureLoader<Integer> loader = new TextureLoader<>(
                (texStream, metadata) -> 1,
                MOCK_READERS,
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = loader.load(repository, "textures");

        assertEquals(3, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("test", "textures/bat.png")));
        assertTrue(locations.containsKey(new ResourceLocation("moremcmeta", "textures/creeper.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/zombie.png")));
    }

    @SafeVarargs
    public static OrderedResourceRepository makeMockRepository(Set<String>... presentFiles) {
        ImmutableSet.Builder<ResourceCollection> builder = new ImmutableSet.Builder<>();

        for (Set<String> files : presentFiles) {
            builder.add(new MockResourceCollection(
                    files.stream().map(ResourceLocation::new).collect(Collectors.toSet())
            ));
        }

        return new OrderedResourceRepository(PackType.CLIENT_RESOURCES, builder.build());
    }

}