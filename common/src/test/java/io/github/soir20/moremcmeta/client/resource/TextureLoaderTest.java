/*
 * MoreMcmeta is a Minecraft mod expanding texture animation capabilities.
 * Copyright (C) 2021 soir20
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package io.github.soir20.moremcmeta.client.resource;

import com.google.common.collect.ImmutableList;
import com.google.gson.JsonParseException;
import io.github.soir20.moremcmeta.client.texture.MockManager;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.packs.resources.Resource;
import net.minecraft.server.packs.resources.ResourceManager;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.io.IOException;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Predicate;

import static org.junit.Assert.*;

/**
 * Tests the {@link TextureLoader}. We assume that the retrieval of files with the correct extension
 * works because that is part of Minecraft's code.
 *
 * Note about low branch coverage for this class: The branches are almost all generated by the compiler
 * in the try-with-resources statement in the listener. Some of these branches might be unreachable.
 * Thus, it makes more sense to test representative cases here than to try to maximize branch coverage.
 * See https://stackoverflow.com/a/17356707 (StackOverflow explanation) and
 * https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.20.3.1 (standards definition
 * of try-with-resources).
 * @author soir20
 */
public class TextureLoaderTest {
    private final Logger LOGGER = LogManager.getLogger();

    @Rule
    public final ExpectedException expectedException = ExpectedException.none();

    @Test
    public void construct_TextureFactoryNull_NullPointerException() {
        expectedException.expect(NullPointerException.class);
        new TextureLoader<>(null, LOGGER);
    }

    @Test
    public void construct_LoggerNull_NullPointerException() {
        expectedException.expect(NullPointerException.class);
        new TextureLoader<>((texStream, metadataStream) -> 1, null);
    }

    @Test
    public void load_ResourceManagerNull_NullPointerException() {
        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        expectedException.expect(NullPointerException.class);
        listener.load(null, "textures");
    }

    @Test
    public void load_EmptyPath_IllegalArgException() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        );

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        expectedException.expect(IllegalArgumentException.class);
        listener.load(mockResourceManager, "");
    }

    @Test
    public void load_SlashOnlyPath_IllegalArgException() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        );

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        expectedException.expect(IllegalArgumentException.class);
        listener.load(mockResourceManager, "/");
    }

    @Test
    public void load_PathStartsWithSlash_IllegalArgException() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        );

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        expectedException.expect(IllegalArgumentException.class);
        listener.load(mockResourceManager, "/textures");
    }

    @Test
    public void load_ValidLocations_LoadsAllTextures() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        );

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        Map<ResourceLocation, Integer> locations = listener.load(mockResourceManager, "textures");

        assertEquals(3, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/creeper.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/zombie.png")));
    }

    @Test
    public void load_DifferentPath_LoadsAllTextures() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        );

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        Map<ResourceLocation, Integer> locations = listener.load(mockResourceManager, "other");

        assertEquals(3, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("other/bat.png")));
        assertTrue(locations.containsKey(new ResourceLocation("other/creeper.png")));
        assertTrue(locations.containsKey(new ResourceLocation("other/zombie.png")));
    }

    @Test
    public void load_ValidLocationsDuplicates_LoadsNoDuplicates() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "bat.png.moremcmeta",
                        "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        );

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        Map<ResourceLocation, Integer> locations = listener.load(mockResourceManager, "textures");

        assertEquals(3, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/creeper.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/zombie.png")));
    }

    @Test
    public void load_FilteredLocations_LoadsFilteredTextures() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper", "zombie.jpg", "ocelot.png"),
                ImmutableList.of(), false
        );

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        Map<ResourceLocation, Integer> locations = listener.load(mockResourceManager, "textures");

        assertEquals(1, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
    }

    @Test
    public void load_MissingTextureLocations_LoadsNoMissingTextures() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of("creeper.png", "zombie.png"), false
        );

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        Map<ResourceLocation, Integer> locations = listener.load(mockResourceManager, "textures");

        assertEquals(1, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
    }

    @Test
    public void load_MissingMetadataLocations_LoadsNoMissingTextures() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of("creeper.png.moremcmeta", "zombie.png.moremcmeta"), false
        );

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        Map<ResourceLocation, Integer> locations = listener.load(mockResourceManager, "textures");

        assertEquals(1, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
    }

    @Test
    public void load_InvalidJson_LoadsValidTextures() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        );

        AtomicInteger texturesLoaded = new AtomicInteger();
        TextureLoader<Integer> listener = new TextureLoader<>(
                (texStream, metadataStream) -> {
                    if (texturesLoaded.getAndIncrement() < 1) {
                        throw new JsonParseException("Dummy exception");
                    }
                    return 1;
                },
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = listener.load(mockResourceManager, "textures");
        assertEquals(2, locations.size());
    }

    @Test
    public void load_InvalidMetadata_LoadsValidTextures() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        );

        AtomicInteger texturesLoaded = new AtomicInteger();
        TextureLoader<Integer> listener = new TextureLoader<>(
                (texStream, metadataStream) -> {
                    if (texturesLoaded.getAndIncrement() < 1) {
                        throw new IllegalArgumentException("Dummy exception");
                    }
                    return 1;
                },
                LOGGER
        );

        Map<ResourceLocation, Integer> locations = listener.load(mockResourceManager, "textures");
        assertEquals(2, locations.size());
    }

    @Test
    public void load_UnknownException_ExceptionNotCaught() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        );


        AtomicInteger texturesLoaded = new AtomicInteger();
        TextureLoader<Integer> listener = new TextureLoader<>(
                (texStream, metadataStream) -> {
                    if (texturesLoaded.getAndIncrement() < 1) {
                        throw new RuntimeException("Dummy exception");
                    }
                    return 1;
                },
                LOGGER
        );

        expectedException.expect(RuntimeException.class);
        listener.load(mockResourceManager, "textures");
    }

    @Test
    public void load_ResourceManagerThrowsUnknownException_ExceptionNotCaught() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        ) {
            @Override
            public Collection<ResourceLocation> listResources(String pathIn, Predicate<String> filter) {
                throw new RuntimeException();
            }
        };

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);


        expectedException.expect(RuntimeException.class);
        listener.load(mockResourceManager, "textures");
    }

    @Test
    public void load_ResourceManagerReturnsNullTexture_NullPointerException() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        ) {
            @Override
            public Resource getResource(ResourceLocation resourceLocationIn) throws IOException {
                if (resourceLocationIn.getPath().endsWith(".moremcmeta")) {
                    return super.getResource(resourceLocationIn);
                }

                return null;
            }
        };

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        expectedException.expect(NullPointerException.class);
        listener.load(mockResourceManager, "textures");
    }

    @Test
    public void load_ResourceManagerReturnsNullMetadata_NullPointerException() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        ) {
            @Override
            public Resource getResource(ResourceLocation resourceLocationIn) throws IOException {
                if (resourceLocationIn.getPath().endsWith(".moremcmeta")) {
                    return null;
                }

                return super.getResource(resourceLocationIn);
            }
        };

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        expectedException.expect(NullPointerException.class);
        listener.load(mockResourceManager, "textures");
    }

    @Test
    public void load_ClosureIOException_LoadsValidTextures() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        ) {
            @Override
            public Resource getResource(ResourceLocation resourceLocationIn) throws IOException {
                if (resourceLocationIn.getPath().contains("bat")) {
                    return super.getResource(resourceLocationIn);
                }

                return new MockSimpleResource(resourceLocationIn, MockResourceManager.DEFAULT_PACK_NAME) {
                    @Override
                    public void close() throws IOException {
                        throw new IOException("Dummy exception");
                    }
                };
            }
        };

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        Map<ResourceLocation, Integer> locations = listener.load(mockResourceManager, "textures");

        assertEquals(1, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("textures/bat.png")));
    }

    @Test
    public void load_ClosureUnknownException_ExceptionNotCaught() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        ) {
            @Override
            public Resource getResource(ResourceLocation resourceLocationIn) throws IOException {
                if (resourceLocationIn.getPath().contains("bat")) {
                    return super.getResource(resourceLocationIn);
                }

                return new MockSimpleResource(resourceLocationIn, MockResourceManager.DEFAULT_PACK_NAME) {
                    @Override
                    public void close() {
                        throw new RuntimeException("Dummy exception");
                    }
                };
            }
        };

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        expectedException.expect(RuntimeException.class);
        listener.load(mockResourceManager, "textures");
    }

    @Test
    public void load_TextureAndMetadataInDifferentPacks_SkipsSeparatedTextures() {
        MockManager<Integer> mockManager = new MockManager<>();
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "creeper.png.moremcmeta", "zombie.png.moremcmeta"),
                ImmutableList.of(), true
        );

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        listener.load(mockResourceManager, "textures");

        Set<ResourceLocation> locations = mockManager.getLocations();
        assertTrue(locations.isEmpty());
    }

    @Test
    public void load_ResourceLocationException_NothingLoaded() {
        MockManager<Integer> mockManager = new MockManager<>();
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("bat.png.moremcmeta", "bad location.png.moremcmeta", "fol der/ocelot.png.moremcmeta"),
                ImmutableList.of(), false
        );

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        listener.load(mockResourceManager, "textures");

        Set<ResourceLocation> locations = mockManager.getLocations();
        assertTrue(locations.isEmpty());
    }

    @Test
    public void load_DiffNamespaces_AllLoaded() {
        ResourceManager mockResourceManager = new MockResourceManager(
                ImmutableList.of("test:bat.png.moremcmeta", "moremcmeta:creeper.png.moremcmeta",
                        "zombie.png.moremcmeta"),
                ImmutableList.of(), false
        );

        TextureLoader<Integer> listener = new TextureLoader<>((texStream, metadataStream) -> 1, LOGGER);

        Map<ResourceLocation, Integer> locations = listener.load(mockResourceManager, "textures");

        assertEquals(3, locations.size());
        assertTrue(locations.containsKey(new ResourceLocation("test", "textures/bat.png")));
        assertTrue(locations.containsKey(new ResourceLocation("moremcmeta", "textures/creeper.png")));
        assertTrue(locations.containsKey(new ResourceLocation("textures/zombie.png")));
    }

}